[{"id":"997e4eccd86df5e8c774c271496f621f","title":"Hexo博客的搭建教程(一)","content":"环境搭建\n操作系统：Win11\nNode.js\nGit\nHexo\n\n安装Node.js\n打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：https://nodejs.org/en/download/我个人的版本是 12.19.0，目前版本已经更新到19.0.0，按照个人经验，可以选个低一些的版本，可以和我的一样，否则后面会出现各种不兼容的问题！我之前就是安装16的，系统无法识别，如果大家遇到问题建议选个低版本的！历史版本下载页面：https://nodejs.org/en/download/releases/\n下载后安装，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;nodejs&#x2F;】，也可以自定义路径。这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!\n安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。\n修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:\n\nshellnpm config set registry https://registry.npm.taobao.org安装Hexo\n在Git BASH输入如下命令安装\n\nshellnpm install -g hexo-cli\n安装完后输入hexo -v验证是否安装成功。\n\n创建仓库\n登录Github，点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。\nDescription：为描述仓库（选填）\n勾选 Initialize this repository with a README 初始化一个 README.md 文件\n点击 Creat repository 进行创建\n\n安装Git参考这边文章：\n初始化Hexo项目\n在目标路径（我这里选的路径为【D:\\新建文件夹\\blog】）打开cmd命令窗口，执行hexo init初始化项目。\n\nshellhexo init blog(项目名)\n进入blog，输入npm install(npm i)安装相关依赖。\n\nshellcd blog  //进入blog文件夹\nnpm install\n初始化项目后，blog-demo有如下结构：【node_modules】：依赖包【scaffolds】：生成文章的一些模板【source】：用来存放你的文章【themes】：主题【.npmignore】：发布时忽略的文件（可忽略）【_config.landscape.yml】：主题的配置文件【config.yml】：博客的配置文件【package.json】：项目名称、描述、版本、运行和开发等信息\n\n输入hexo server(hexo s)启动项目\n\n打开浏览器，输入地址：http://localhost:4000/ ，看到下面的效果，说明你的博客已经构建成功了。\n\n\n将静态博客挂载到 GitHub Pages\n安装 hexo-deployer-git\n\nshellnpm install hexo-deployer-git --save\n修改 _config.yml 文件在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。\n\nyamldeploy:\n  type: git\n  repository: git@github.com:Jeafly/Jeafly.github.io.git\n  branch: main\n修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。\n\nshellhexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端\nhexo clean; hexo generate; hexo deploy  // VSCODE终端(PowerShell)\nhexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。\nhexo generate：生成静态文章，可以用hexo g缩写\nhexo deploy：部署文章，可以用hexo d缩写:::tip注意：deploy时可能要你输入 username 和 password。:::如果出现Deploy done，则说明部署成功了。\n\n稍等两分钟，打开浏览器访问：https://Jeafly.github.io ，这时候我们就可以看到博客内容了。\n\n\n\n\n\n\n\n\n\n无法连接github的解决方案\n\n挂代理或者加速器\n修改Host文件，可以参考开源项目Github520\n\n","slug":"Hexo博客的搭建教程(二)","date":"2023-10-05T14:01:31.000Z","categories_index":"","tags_index":"Hexo","author_index":"Jeafly"},{"id":"997e4eccd86df5e8c774c271496f621f","title":"Hexo博客的搭建教程(一)","content":"环境搭建\n操作系统：Win11\nNode.js\nGit\nHexo\n\n安装Node.js\n打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：https://nodejs.org/en/download/我个人的版本是 12.19.0，目前版本已经更新到19.0.0，按照个人经验，可以选个低一些的版本，可以和我的一样，否则后面会出现各种不兼容的问题！我之前就是安装16的，系统无法识别，如果大家遇到问题建议选个低版本的！历史版本下载页面：https://nodejs.org/en/download/releases/\n下载后安装，安装的目录可以使用默认目录【C:&#x2F;Program Files&#x2F;nodejs&#x2F;】，也可以自定义路径。这个环境路径切换坑也很多，如果大家C盘空间足够可以直接装C盘，如果想切换其他盘或者把环境遍历切换到自定义路径也可以，具体教程百度(不过坑比较多就是了)!\n安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。\n修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:\n\nshellnpm config set registry https://registry.npm.taobao.org安装Hexo\n在Git BASH输入如下命令安装\n\nshellnpm install -g hexo-cli\n安装完后输入hexo -v验证是否安装成功。\n\n创建仓库\n登录Github，点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。\nDescription：为描述仓库（选填）\n勾选 Initialize this repository with a README 初始化一个 README.md 文件\n点击 Creat repository 进行创建\n\n安装Git参考这边文章：\n初始化Hexo项目\n在目标路径（我这里选的路径为【D:\\新建文件夹\\blog】）打开cmd命令窗口，执行hexo init初始化项目。\n\nshellhexo init blog(项目名)\n进入blog，输入npm install(npm i)安装相关依赖。\n\nshellcd blog  //进入blog文件夹\nnpm install\n初始化项目后，blog-demo有如下结构：【node_modules】：依赖包【scaffolds】：生成文章的一些模板【source】：用来存放你的文章【themes】：主题【.npmignore】：发布时忽略的文件（可忽略）【_config.landscape.yml】：主题的配置文件【config.yml】：博客的配置文件【package.json】：项目名称、描述、版本、运行和开发等信息\n\n输入hexo server(hexo s)启动项目\n\n打开浏览器，输入地址：http://localhost:4000/ ，看到下面的效果，说明你的博客已经构建成功了。\n\n\n将静态博客挂载到 GitHub Pages\n安装 hexo-deployer-git\n\nshellnpm install hexo-deployer-git --save\n修改 _config.yml 文件在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。\n\nyamldeploy:\n  type: git\n  repository: git@github.com:Jeafly/Jeafly.github.io.git\n  branch: main\n修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。\n\nshellhexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端\nhexo clean; hexo generate; hexo deploy  // VSCODE终端(PowerShell)\nhexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。\nhexo generate：生成静态文章，可以用hexo g缩写\nhexo deploy：部署文章，可以用hexo d缩写:::tip注意：deploy时可能要你输入 username 和 password。:::如果出现Deploy done，则说明部署成功了。\n\n稍等两分钟，打开浏览器访问：https://Jeafly.github.io ，这时候我们就可以看到博客内容了。\n\n\n\n\n\n\n\n\n\n无法连接github的解决方案\n\n挂代理或者加速器\n修改Host文件，可以参考开源项目Github520\n\n","slug":"Hexo博客的搭建教程(一)","date":"2023-10-05T14:01:31.000Z","categories_index":"","tags_index":"Hexo","author_index":"Jeafly"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new postbash$ hexo new &quot;My New Post&quot;More info: Writing\nRun serverbash$ hexo serverMore info: Server\nGenerate static filesbash$ hexo generateMore info: Generating\nDeploy to remote sitesbash$ hexo deployMore info: Deployment\n","slug":"hello-world","date":"2023-09-29T07:41:23.979Z","categories_index":"","tags_index":"","author_index":"Jeafly"},{"id":"24b29d655ad2404fb43e7381c28dfc18","title":"git使用笔记","content":"\n\n\n\n\n\n\n\n\n当在多个电脑上协同工作时，我们不免用到版本控制系统，版本控制系统分为分布式与集中式。集中式版本控制系统的代码存放在中央仓库，用的时候需要先拉取并且一直保持联网才能使用，常见的有CVS与SVN。分布式版本控制系统的代码存放在中央仓库与每个人的电脑中，因此也比较安全，常见的有git。git是世界上最先进的版本控制系统，有强大的分支管理功能。\ngit的安装和配置下载与安装Windows进入官网：(https://git-scm.com/downloads)下载安装包安装。由于官网下载太慢可以通过淘宝的开源镜像下载 网址：https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/ ，下载版本更具自己的需求选择即可。\nUbuntu&#x2F;Debianshell$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev\n\n$ apt-get install git\n\n$ git --version\ngit version 1.8.1.2Centosshell$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n\n$ yum -y install git-core\n\n$ git --version\ngit version 1.7.1\n\n\n\n\n\n\n提示\n安装完右击即可看见三个选项\n\nGit CMD 是windows 命令行的指令风格\nGit Bash 是linux系统的指令风格（建议使用）\nGit GUI是图形化界面（新手学习不建议使用）:::\n\n设置全局身份右键打开Git Bash，设置用户名和邮箱\nshell$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;:::tip如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。\n如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。\n\n\n\n\n\n\n\n提示\n通过git config -l 检查是否配置成功，至此git安装及配置全部完成。\nshell$ git config --list\n\n生成密钥shell$ ssh-keygen -t rsa -C &quot;邮箱名称&quot;\n\n\n\n\n\n提示\n生成过程中有设置密码的环节，无需设置密码可直接回车生成成功后私钥和公钥存在于用户目录的.ssh中。\n\n私钥存放在C:\\Users\\16475\\.ssh\\id_rsa.pub中，用记事本打开复制内容粘贴到剪贴板。进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。\n\n\n\n\n\n\n提示\n测试连接，输入以下命令:\nshellssh -T git@github.com出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。\n\n使用gitgit使用流程\n\n\n\n\n\n提示\n(初始化仓库 -&gt;添加远程仓库)&#x2F; (克隆远程仓库到本地) -&gt;添加文件到本地分支-&gt;将文件发送到暂存区 -&gt;将文件提交到代码仓库\n\n初始化git仓库shell$ git init添加远程仓库:::tip 列出当前仓库中已配置的远程仓库，并显示它们的 URL。\nshell$ git remote -v:::github仓库名    &#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;:Jeafly&#x2F;Jeafly.github.io.git URL\nshell$ git remote add github git@github.com:Jeafly/Jeafly.github.io.git将本地文件夹下的文件添加到本地分支shell$ git add .将文件存储到暂存区shell$ git commit -m [message]将文件提交到远程仓库shell$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;(:&lt;远程分支名&gt;)克隆远程仓库到本地shell$ git clone [url]","slug":"git使用笔记","date":"2023-09-29T01:48:32.000Z","categories_index":"git","tags_index":"git","author_index":"Jeafly"},{"id":"7266ad9c525304f9e83db739edfd7912","title":"OpenWrt转移将/overlay挂载到SDCard上(以MT1300为例)","content":"1. 安装相关工具(汉化web界面)shellopkg update\nopkg install block-mount kmod-fs-ext4 e2fsprogs fdisk\nopkg install luci-i18n-base-zh-cn2.修改fstab配置文件，更改现有文件系统的挂载点shellDEVICE=&quot;$(sed -n -e &quot;/\\s\\/overlay\\s.*$/s///p&quot; /etc/mtab)&quot;\nuci -q delete fstab.rwm\nuci set fstab.rwm=&quot;mount&quot;\nuci set fstab.rwm.device=&quot;$&#123;DEVICE&#125;&quot;\nuci set fstab.rwm.target=&quot;/rwm&quot;\nuci commit fstab3.查看U盘的相关信息shellblock info如果磁盘格式不是ext4,请执行下面的命令，否则跳过（注意，以下操作会格式化磁盘，请提前备份磁盘文件），注意命令中的&#x2F;dev&#x2F;sda1是使用block命令查看到的实际节点，请根据自己的实际情况修改\nshellDEVICE=&quot;/dev/mmcblk0p1&quot;\numount /dev/mmcblk0p1\nmkfs.ext4 $&#123;DEVICE&#125;4.在配置文件中设置挂载点，注意命令中的&#x2F;dev&#x2F;sda1是使用block命令查看到的实际节点，请根据自己的实际情况修改shellDEVICE=&quot;/dev/mmcblk0p1&quot;\neval $(block info $&#123;DEVICE&#125; | grep -o -e &quot;UUID=\\S*&quot;)\nuci -q delete fstab.overlay\nuci set fstab.overlay=&quot;mount&quot;\nuci set fstab.overlay.uuid=&quot;$&#123;UUID&#125;&quot;\nuci set fstab.overlay.target=&quot;/overlay&quot;\nuci commit fstab5.将文件系统中现有的内容拷贝到U盘中shellmkdir -p /tmp/cproot\nmount --bind /overlay /tmp/cproot\nmount $&#123;DEVICE&#125; /mnt\ntar -C /tmp/cproot -cvf - . | tar -C /mnt -xf -\numount /tmp/cproot /mnt6.重启路由器shellreboot\n\n\n\n\n\n完成后占用高问题(未测试)\n安装openclash后，占用很高的问题，捎带理解一下linux占用如何看\nhttp://www.ruanyifeng.com/blog/2011/07/linux_load_average_explained.html\n开启（关闭） flow offload\nshelliptables -I FORWARD 1 -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD\niptables -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD实测mtk7621a 日常使用， 5分钟占用从0.6起步，降低到0.2\n\n","slug":"OpenWrt转移将-overlay挂载到SDCard上(以MT1300为例)","date":"2023-09-28T15:13:53.000Z","categories_index":"Openwrt","tags_index":"Openwrt","author_index":"Jeafly"}]